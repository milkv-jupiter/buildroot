From 4aa2a015ac226e7b56207f342bfc5938f54e3d4a Mon Sep 17 00:00:00 2001
From: "lff@Snode" <junzhao.liang@spacemit.com>
Date: Fri, 29 Mar 2024 11:22:34 +0800
Subject: [PATCH] [RVV] optimized libpng

---
 CMakeLists.txt                   |  30 +++
 INSTALL                          |  10 +-
 Makefile.am                      |   5 +
 Makefile.in                      |  49 ++++-
 README                           |   1 +
 config.h.in                      |  13 ++
 configure                        | 121 +++++++++++
 configure.ac                     |  85 ++++++++
 contrib/riscv_vector/README      |  82 +++++++
 contrib/riscv_vector/linux.c     |  84 ++++++++
 png.h                            |   5 +-
 pngpriv.h                        |  29 +++
 riscv/filter_vector_intrinsics.c | 354 +++++++++++++++++++++++++++++++
 riscv/riscv_init.c               | 127 +++++++++++
 14 files changed, 981 insertions(+), 14 deletions(-)
 create mode 100644 contrib/riscv_vector/README
 create mode 100644 contrib/riscv_vector/linux.c
 create mode 100644 riscv/filter_vector_intrinsics.c
 create mode 100644 riscv/riscv_init.c

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 86e0aff..32512c9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -123,6 +123,30 @@ if(TARGET_ARCH MATCHES "^arm" OR
   endif()
 endif()
 
+# Set definitions and sources for RISC-V.
+if(CMAKE_SYSTEM_PROCESSOR MATCHES "^riscv*")
+  set(PNG_RISCV_VECTOR_POSSIBLE_VALUES check on off)
+  set(PNG_RISCV_VECTOR "check"
+      CACHE STRING "Enable RISC-V Vector optimizations: check|on|off; check is default")
+  set_property(CACHE PNG_RISCV_VECTOR
+               PROPERTY STRINGS ${PNG_RISCV_VECTOR_POSSIBLE_VALUES})
+  list(FIND PNG_RISCV_VECTOR_POSSIBLE_VALUES ${PNG_RISCV_VECTOR} index)
+  if(index EQUAL -1)
+    message(FATAL_ERROR "PNG_RISCV_VECTOR must be one of [${PNG_RISCV_VECTOR_POSSIBLE_VALUES}]")
+  elseif(NOT ${PNG_RISCV_VECTOR} STREQUAL "off")
+    set(libpng_riscv_sources
+        riscv/riscv_init.c
+        riscv/filter_vector_intrinsics.c)
+    if(${PNG_RISCV_VECTOR} STREQUAL "on")
+      add_definitions(-DPNG_RISCV_VECTOR_OPT=2)
+    elseif(${PNG_RISCV_VECTOR} STREQUAL "check")
+      add_definitions(-DPNG_RISCV_VECTOR_CHECK_SUPPORTED)
+    endif()
+  else()
+    add_definitions(-DPNG_RISCV_VECTOR_OPT=0)
+  endif()
+endif()
+
 # Set definitions and sources for PowerPC.
 if(TARGET_ARCH MATCHES "^powerpc*" OR
    TARGET_ARCH MATCHES "^ppc64*")
@@ -200,6 +224,11 @@ if(TARGET_ARCH MATCHES "^arm" OR
   add_definitions(-DPNG_ARM_NEON_OPT=0)
 endif()
 
+# Set definitions and sources for RISC-V.
+if(TARGET_ARCH MATCHES "^riscv")
+  add_definitions(-DPNG_RISCV_VECTOR_OPT=0)
+endif()
+
 # Set definitions and sources for PowerPC.
 if(TARGET_ARCH MATCHES "^powerpc*" OR
    TARGET_ARCH MATCHES "^ppc64*")
@@ -545,6 +574,7 @@ set(libpng_sources
     pngwtran.c
     pngwutil.c
     ${libpng_arm_sources}
+    ${libpng_riscv_sources}
     ${libpng_intel_sources}
     ${libpng_mips_sources}
     ${libpng_powerpc_sources}
diff --git a/INSTALL b/INSTALL
index 042d729..65a6ea9 100644
--- a/INSTALL
+++ b/INSTALL
@@ -137,7 +137,7 @@ Your directory structure should look like this:
              depcomp, install-sh, mkinstalldirs, test-pngtest.sh, etc.
           contrib
              arm-neon, conftest, examples, gregbook, libtests, pngminim,
-             pngminus, pngsuite, tools, visupng
+             pngminus, pngsuite, tools, visupng, riscv-vector
           projects
              owatcom, visualc71, vstudio
           scripts
@@ -287,6 +287,7 @@ are normally detected at run time. Enable them with configure options
 such as one of
 
    --enable-arm-neon=yes
+   --enable-riscv-vector=yes
    --enable-mips-msa=yes
    --enable-intel-sse=yes
    --enable-powerpc-vsx=yes
@@ -299,6 +300,7 @@ or, if you are not using "configure", you can use one
 or more of
 
    CPPFLAGS += "-DPNG_ARM_NEON"
+   CPPFLAGS += "-DPNG_RISCV_VECTOR"
    CPPFLAGS += "-DPNG_MIPS_MSA"
    CPPFLAGS += "-DPNG_INTEL_SSE"
    CPPFLAGS += "-DPNG_POWERPC_VSX"
@@ -318,13 +320,15 @@ to disable a particular one,
 or via compiler-command options such as
 
    CPPFLAGS += "-DPNG_ARM_NEON_OPT=0, -DPNG_MIPS_MSA_OPT=0,
-   -DPNG_INTEL_SSE_OPT=0, -DPNG_POWERPC_VSX_OPT=0"
+   -DPNG_INTEL_SSE_OPT=0, -DPNG_POWERPC_VSX_OPT=0,
+   -DPNG_RISCV_VECTOR_OPT=0"
 
 If you are using cmake, hardware optimizations are "on"
 by default. To disable them, use
 
     cmake . -DPNG_ARM_NEON=no -DPNG_INTEL_SSE=no \
-            -DPNG_MIPS_MSA=no -DPNG_POWERPC_VSX=no
+            -DPNG_MIPS_MSA=no -DPNG_POWERPC_VSX=no \
+            -DPNG_RISCV_VECTOR=no
 
 or disable them all at once with
 
diff --git a/Makefile.am b/Makefile.am
index f0ca8d4..86e3da3 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -98,6 +98,11 @@ libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_SOURCES += arm/arm_init.c\
 	arm/palette_neon_intrinsics.c
 endif
 
+if PNG_RISCV_VECTOR
+libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_SOURCES += riscv/riscv_init.c\
+	riscv/filter_vector_intrinsics.c
+endif
+
 if PNG_MIPS_MSA
 libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_SOURCES += mips/mips_init.c\
 	mips/filter_msa_intrinsics.c
diff --git a/Makefile.in b/Makefile.in
index ba57014..a12a9c9 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -118,13 +118,15 @@ bin_PROGRAMS =
 @PNG_POWERPC_VSX_TRUE@am__append_5 = powerpc/powerpc_init.c\
 @PNG_POWERPC_VSX_TRUE@        powerpc/filter_vsx_intrinsics.c
 
+@PNG_RISCV_VECTOR_TRUE@am__append_6 = riscv/riscv_init.c\
+@PNG_RISCV_VECTOR_TRUE@	riscv/filter_vector_intrinsics.c
 
 #   Versioned symbols and restricted exports
-@HAVE_LD_VERSION_SCRIPT_TRUE@@HAVE_SOLARIS_LD_TRUE@am__append_6 = -Wl,-M -Wl,libpng.vers
-@HAVE_LD_VERSION_SCRIPT_TRUE@@HAVE_SOLARIS_LD_FALSE@am__append_7 = -Wl,--version-script=libpng.vers
+@HAVE_LD_VERSION_SCRIPT_TRUE@@HAVE_SOLARIS_LD_TRUE@am__append_7 = -Wl,-M -Wl,libpng.vers
+@HAVE_LD_VERSION_SCRIPT_TRUE@@HAVE_SOLARIS_LD_FALSE@am__append_8 = -Wl,--version-script=libpng.vers
 #   Only restricted exports when possible
-@HAVE_LD_VERSION_SCRIPT_FALSE@am__append_8 = -export-symbols libpng.sym
-@DO_PNG_PREFIX_TRUE@am__append_9 = -DPNG_PREFIX='@PNG_PREFIX@'
+@HAVE_LD_VERSION_SCRIPT_FALSE@am__append_9 = -export-symbols libpng.sym
+@DO_PNG_PREFIX_TRUE@am__append_10 = -DPNG_PREFIX='@PNG_PREFIX@'
 subdir = .
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/scripts/libtool.m4 \
@@ -187,7 +189,8 @@ am__libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_SOURCES_DIST = png.c \
 	arm/palette_neon_intrinsics.c mips/mips_init.c \
 	mips/filter_msa_intrinsics.c intel/intel_init.c \
 	intel/filter_sse2_intrinsics.c powerpc/powerpc_init.c \
-	powerpc/filter_vsx_intrinsics.c
+	powerpc/filter_vsx_intrinsics.c riscv/riscv_init.c \
+	riscv/filter_vector_intrinsics.c
 am__dirstamp = $(am__leading_dot)dirstamp
 @PNG_ARM_NEON_TRUE@am__objects_1 = arm/arm_init.lo arm/filter_neon.lo \
 @PNG_ARM_NEON_TRUE@	arm/filter_neon_intrinsics.lo \
@@ -198,11 +201,14 @@ am__dirstamp = $(am__leading_dot)dirstamp
 @PNG_INTEL_SSE_TRUE@	intel/filter_sse2_intrinsics.lo
 @PNG_POWERPC_VSX_TRUE@am__objects_4 = powerpc/powerpc_init.lo \
 @PNG_POWERPC_VSX_TRUE@	powerpc/filter_vsx_intrinsics.lo
+@PNG_RISCV_VECTOR_TRUE@am__objects_5 = riscv/riscv_init.lo \
+@PNG_RISCV_VECTOR_TRUE@	riscv/filter_vector_intrinsics.lo
 am_libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_OBJECTS = png.lo pngerror.lo \
 	pngget.lo pngmem.lo pngpread.lo pngread.lo pngrio.lo \
 	pngrtran.lo pngrutil.lo pngset.lo pngtrans.lo pngwio.lo \
 	pngwrite.lo pngwtran.lo pngwutil.lo $(am__objects_1) \
-	$(am__objects_2) $(am__objects_3) $(am__objects_4)
+	$(am__objects_2) $(am__objects_3) $(am__objects_4) \
+	$(am__objects_5)
 nodist_libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_OBJECTS =
 libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_OBJECTS =  \
 	$(am_libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_OBJECTS) \
@@ -283,7 +289,9 @@ am__depfiles_remade = ./$(DEPDIR)/png.Plo ./$(DEPDIR)/pngerror.Plo \
 	mips/$(DEPDIR)/filter_msa_intrinsics.Plo \
 	mips/$(DEPDIR)/mips_init.Plo \
 	powerpc/$(DEPDIR)/filter_vsx_intrinsics.Plo \
-	powerpc/$(DEPDIR)/powerpc_init.Plo
+	powerpc/$(DEPDIR)/powerpc_init.Plo \
+	riscv/$(DEPDIR)/filter_vector_intrinsics.Plo \
+	riscv/$(DEPDIR)/riscv_init.Plo
 am__mv = mv -f
 CPPASCOMPILE = $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS)
@@ -771,12 +779,12 @@ libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_SOURCES = png.c pngerror.c \
 	pngrutil.c pngset.c pngtrans.c pngwio.c pngwrite.c pngwtran.c \
 	pngwutil.c png.h pngconf.h pngdebug.h pnginfo.h pngpriv.h \
 	pngstruct.h pngusr.dfa $(am__append_2) $(am__append_3) \
-	$(am__append_4) $(am__append_5)
+	$(am__append_4) $(am__append_5) $(am__append_6)
 nodist_libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_SOURCES = pnglibconf.h
 libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_LDFLAGS = -no-undefined \
 	-export-dynamic -version-number \
 	@PNGLIB_MAJOR@@PNGLIB_MINOR@:@PNGLIB_RELEASE@:0 \
-	$(am__append_6) $(am__append_7) $(am__append_8)
+	$(am__append_7) $(am__append_8) $(am__append_9)
 @HAVE_LD_VERSION_SCRIPT_FALSE@libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_DEPENDENCIES = libpng.sym
 @HAVE_LD_VERSION_SCRIPT_TRUE@libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_DEPENDENCIES = libpng.vers
 pkginclude_HEADERS = png.h pngconf.h
@@ -812,7 +820,7 @@ SUFFIXES = .chk .out
 SYMBOL_CFLAGS = -DPNGLIB_LIBNAME='PNG@PNGLIB_MAJOR@@PNGLIB_MINOR@_0' \
 	-DPNGLIB_VERSION='@PNGLIB_VERSION@' \
 	-DSYMBOL_PREFIX='$(SYMBOL_PREFIX)' -DPNG_NO_USE_READ_MACROS \
-	-DPNG_BUILDING_SYMBOL_TABLE $(am__append_9)
+	-DPNG_BUILDING_SYMBOL_TABLE $(am__append_10)
 
 # EXT_LIST is a list of the possibly library directory extensions, this exists
 # because we can't find a good way of discovering the file extensions that are
@@ -1010,6 +1018,16 @@ powerpc/powerpc_init.lo: powerpc/$(am__dirstamp) \
 	powerpc/$(DEPDIR)/$(am__dirstamp)
 powerpc/filter_vsx_intrinsics.lo: powerpc/$(am__dirstamp) \
 	powerpc/$(DEPDIR)/$(am__dirstamp)
+riscv/$(am__dirstamp):
+	@$(MKDIR_P) riscv
+	@: > riscv/$(am__dirstamp)
+riscv/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) riscv/$(DEPDIR)
+	@: > riscv/$(DEPDIR)/$(am__dirstamp)
+riscv/riscv_init.lo: riscv/$(am__dirstamp) \
+	riscv/$(DEPDIR)/$(am__dirstamp)
+riscv/filter_vector_intrinsics.lo: riscv/$(am__dirstamp) \
+	riscv/$(DEPDIR)/$(am__dirstamp)
 
 libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@.la: $(libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_OBJECTS) $(libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_DEPENDENCIES) $(EXTRA_libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_LINK) -rpath $(libdir) $(libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_OBJECTS) $(libpng@PNGLIB_MAJOR@@PNGLIB_MINOR@_la_LIBADD) $(LIBS)
@@ -1126,6 +1144,8 @@ mostlyclean-compile:
 	-rm -f mips/*.lo
 	-rm -f powerpc/*.$(OBJEXT)
 	-rm -f powerpc/*.lo
+	-rm -f riscv/*.$(OBJEXT)
+	-rm -f riscv/*.lo
 
 distclean-compile:
 	-rm -f *.tab.c
@@ -1164,6 +1184,8 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@mips/$(DEPDIR)/mips_init.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@powerpc/$(DEPDIR)/filter_vsx_intrinsics.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@powerpc/$(DEPDIR)/powerpc_init.Plo@am__quote@ # am--include-marker
+@AMDEP_TRUE@@am__include@ @am__quote@riscv/$(DEPDIR)/filter_vector_intrinsics.Plo@am__quote@ # am--include-marker
+@AMDEP_TRUE@@am__include@ @am__quote@riscv/$(DEPDIR)/riscv_init.Plo@am__quote@ # am--include-marker
 
 $(am__depfiles_remade):
 	@$(MKDIR_P) $(@D)
@@ -1228,6 +1250,7 @@ clean-libtool:
 	-rm -rf intel/.libs intel/_libs
 	-rm -rf mips/.libs mips/_libs
 	-rm -rf powerpc/.libs powerpc/_libs
+	-rm -rf riscv/.libs riscv/_libs
 
 distclean-libtool:
 	-rm -f libtool config.lt
@@ -2052,6 +2075,8 @@ distclean-generic:
 	-rm -f mips/$(am__dirstamp)
 	-rm -f powerpc/$(DEPDIR)/$(am__dirstamp)
 	-rm -f powerpc/$(am__dirstamp)
+	-rm -f riscv/$(DEPDIR)/$(am__dirstamp)
+	-rm -f riscv/$(am__dirstamp)
 
 maintainer-clean-generic:
 	@echo "This command is intended for maintainers to use"
@@ -2102,6 +2127,8 @@ distclean: distclean-am
 	-rm -f mips/$(DEPDIR)/mips_init.Plo
 	-rm -f powerpc/$(DEPDIR)/filter_vsx_intrinsics.Plo
 	-rm -f powerpc/$(DEPDIR)/powerpc_init.Plo
+	-rm -f riscv/$(DEPDIR)/filter_vector_intrinsics.Plo
+	-rm -f riscv/$(DEPDIR)/riscv_init.Plo
 	-rm -f Makefile
 distclean-am: clean-am distclean-compile distclean-generic \
 	distclean-hdr distclean-libtool distclean-tags
@@ -2187,6 +2214,8 @@ maintainer-clean: maintainer-clean-am
 	-rm -f mips/$(DEPDIR)/mips_init.Plo
 	-rm -f powerpc/$(DEPDIR)/filter_vsx_intrinsics.Plo
 	-rm -f powerpc/$(DEPDIR)/powerpc_init.Plo
+	-rm -f riscv/$(DEPDIR)/filter_vector_intrinsics.Plo
+	-rm -f riscv/$(DEPDIR)/riscv_init.Plo
 	-rm -f Makefile
 maintainer-clean-am: distclean-am maintainer-clean-generic
 
diff --git a/README b/README
index 097a3c2..d833622 100644
--- a/README
+++ b/README
@@ -148,6 +148,7 @@ Files in this distribution:
     intel/        =>  Optimized code for the INTEL-SSE2 platform
     mips/         =>  Optimized code for the MIPS platform
     powerpc/      =>  Optimized code for the PowerPC platform
+    riscv/        =>  Optimized code for the riscv platform
     ci/           =>  Scripts for continuous integration
     contrib/      =>  External contributions
         arm-neon/     =>  Optimized code for the ARM-NEON platform
diff --git a/config.h.in b/config.h.in
index 3309c9f..9b501aa 100644
--- a/config.h.in
+++ b/config.h.in
@@ -96,6 +96,19 @@
 /* Enable POWERPC VSX optimizations */
 #undef PNG_POWERPC_VSX_OPT
 
+/* Turn on RISC-V Vector optimizations at run-time */
+#undef PNG_RISCV_VECTOR_API_SUPPORTED
+
+/* Check for RISC-V Vector support at run-time */
+#undef PNG_RISCV_VECTOR_CHECK_SUPPORTED
+
+/* Enable RISC-V Vector optimizations */
+#undef PNG_RISCV_VECTOR_OPT
+
+/* Enable RISC-V Vector compatibility for drafts 0.7.1, 0.8, 0.9, 0.10
+ * and release 1.0 */
+#undef PNG_RISCV_VECTOR_COMPAT
+
 /* Define to 1 if all of the C90 standard headers exist (not just the ones
    required in a freestanding environment). This macro is provided for
    backward compatibility; new code need not use it. */
diff --git a/configure b/configure
index 8ad4092..636c336 100755
--- a/configure
+++ b/configure
@@ -663,6 +663,8 @@ ac_subst_vars='am__EXEEXT_FALSE
 am__EXEEXT_TRUE
 LTLIBOBJS
 LIBOBJS
+PNG_RISCV_VECTOR_FALSE
+PNG_RISCV_VECTOR_TRUE
 PNG_POWERPC_VSX_FALSE
 PNG_POWERPC_VSX_TRUE
 PNG_INTEL_SSE_FALSE
@@ -849,6 +851,8 @@ enable_arm_neon
 enable_mips_msa
 enable_intel_sse
 enable_powerpc_vsx
+enable_riscv_vector
+enable_riscv_vector_compat
 '
       ac_precious_vars='build_alias
 host_alias
@@ -1560,6 +1564,24 @@ Optional Features:
                           default, enable by a call to png_set_option yes/on:
                           turn on unconditionally. If not specified:
                           determined by the compiler.
+  --enable-riscv-vector Enable RISC-V Vector optimizations: =no/off, check,
+                          api, yes/on: no/off: disable the optimizations;
+                          check: use internal checking code (experimental);
+                          api: disable by default, enable by a call to
+                          png_set_option; yes/on: turn on unconditionally.
+                          Note: The compiler must support riscv-vector (e.g.
+                          -march=rv64gv). If not specified: determined by the
+                          compiler.
+  --enable-riscv-vector-compat
+                          Enable compatibility for RISC-V Vector drafts 0.7.1,
+                          0.8, 0.9, or 0.10 (only used if RISC-V Vector
+                          optimizations are enabled): =no/off, 0.7.1, 0.8,
+                          0.9, 0.10: no/off: Support RISC-V Vector release
+                          1.0; 0.7.1: Support RISC-V Vector draft 0.7.1; 0.8:
+                          Support RISC-V Vector draft 0.8; 0.9: Support RISC-V
+                          Vector draft 0.9; 0.10: Support RISC-V Vector draft
+                          0.10. If not specified: off (Support RISC-V Vector
+                          release 1.0).
 
 Optional Packages:
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
@@ -14061,6 +14083,10 @@ printf "%s\n" "#define PNG_POWERPC_VSX_OPT 0" >>confdefs.h
 
 printf "%s\n" "#define PNG_INTEL_SSE_OPT 0" >>confdefs.h
 
+         enable_riscv_vector=no
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_OPT 0" >>confdefs.h
+
          ;;
       *)
          # allow enabling hardware optimization on any system:
@@ -14089,6 +14115,12 @@ printf "%s\n" "#define PNG_INTEL_SSE_OPT 1" >>confdefs.h
 printf "%s\n" "#define PNG_POWERPC_VSX_OPT 2" >>confdefs.h
 
               ;;
+	          riscv*)
+              enable_riscv_vector=yes
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_OPT 2" >>confdefs.h
+
+              ;;
          esac
          ;;
    esac
@@ -14309,6 +14341,91 @@ else
   PNG_POWERPC_VSX_FALSE=
 fi
 
+# RISC-V
+# ===
+#
+# RISC-V Vector support.
+
+# Check whether --enable-riscv-vector was given.
+if test ${enable_riscv_vector+y}
+then :
+  enableval=$enable_riscv_vector; case "$enableval" in
+      no|off)
+         # disable the default enabling on __RISCV_VECTOR__ systems:
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_OPT 0" >>confdefs.h
+
+         # Prevent inclusion of the assembler files below:
+         enable_riscv_vector=no;;
+      check)
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_CHECK_SUPPORTED /**/" >>confdefs.h
+;;
+      api)
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_API_SUPPORTED /**/" >>confdefs.h
+;;
+      yes|on)
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_OPT 2" >>confdefs.h
+
+         { printf "%s\n" "$as_me:${as_lineno-$LINENO}: WARNING: --enable-riscv-vector: please specify 'check' or 'api', if
+            you want the optimizations unconditionally pass '-march=rv...v' (e.g. '-march=rv64gv')
+            to the compiler." >&5
+printf "%s\n" "$as_me: WARNING: --enable-riscv-vector: please specify 'check' or 'api', if
+            you want the optimizations unconditionally pass '-march=rv...v' (e.g. '-march=rv64gv')
+            to the compiler." >&2;};;
+      *)
+         as_fn_error $? "--enable-riscv-vector=${enable_riscv_vector}: invalid value" "$LINENO" 5
+   esac
+fi
+
+
+# compatibility to RVV draft 0.7.1, 0.8, 0.9, 0.10 and release 1.0
+# Check whether --enable-riscv-vector-compat was given.
+if test "${enable_riscv_vector_compat+set}" = set; then :
+  enableval=$enable_riscv_vector_compat; case "$enableval" in
+      no|off);;
+      yes|on)
+         as_fn_error $? "--enable-riscv-vector-compat: a specific draft version must be given" "$LINENO" 5;;
+      "0.7.1")
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_COMPAT 7" >>confdefs.h
+;;
+      "0.8")
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_COMPAT 8" >>confdefs.h
+;;
+      "0.9")
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_COMPAT 9" >>confdefs.h
+;;
+      "0.10")
+
+printf "%s\n" "#define PNG_RISCV_VECTOR_COMPAT 10" >>confdefs.h
+;;
+      *)
+         as_fn_error $? "--enable-riscv-vector-compat=${enable_riscv_vector_compat}: invalid value" "$LINENO" 5
+   esac
+fi
+
+
+# Add RISC-V specific files to all builds where the host_cpu is riscv ('riscv*') or
+# where RISC-V optimizations were explicitly requested (this allows a fallback if a
+# future host CPU does not match 'riscv*')
+
+ if test "$enable_riscv_vector" != 'no' &&
+    case "$host_cpu" in
+      riscv*) :;;
+      *)    test "$enable_riscv_vector" != '';;
+    esac; then
+  PNG_RISCV_VECTOR_TRUE=
+  PNG_RISCV_VECTOR_FALSE='#'
+else
+  PNG_RISCV_VECTOR_TRUE='#'
+  PNG_RISCV_VECTOR_FALSE=
+fi
+
 
 { printf "%s\n" "$as_me:${as_lineno-$LINENO}: Extra options for compiler: $PNG_COPTS" >&5
 printf "%s\n" "$as_me: Extra options for compiler: $PNG_COPTS" >&6;}
@@ -14504,6 +14621,10 @@ if test -z "${PNG_POWERPC_VSX_TRUE}" && test -z "${PNG_POWERPC_VSX_FALSE}"; then
   as_fn_error $? "conditional \"PNG_POWERPC_VSX\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
+if test -z "${PNG_RISCV_VECTOR_TRUE}" && test -z "${PNG_RISCV_VECTOR_FALSE}"; then
+  as_fn_error $? "conditional \"PNG_RISCV_VECTOR\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 
 : "${CONFIG_STATUS=./config.status}"
 ac_write_fail=0
diff --git a/configure.ac b/configure.ac
index 986c774..4ab447b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -316,6 +316,9 @@ AC_ARG_ENABLE([hardware-optimizations],
          enable_intel_sse=no
          AC_DEFINE([PNG_INTEL_SSE_OPT], [0],
            [Disable INTEL_SSE optimizations])
+         enable_riscv_vector=no
+         AC_DEFINE([PNG_RISCV_VECTOR_OPT], [0],
+           [Disable RISCV_VECTOR optimizations])
          ;;
       *)
          # allow enabling hardware optimization on any system:
@@ -340,6 +343,11 @@ AC_ARG_ENABLE([hardware-optimizations],
               AC_DEFINE([PNG_POWERPC_VSX_OPT], [2],
                 [Enable POWERPC VSX optimizations])
               ;;
+	         riscv*)
+              enable_riscv_vector=yes
+              AC_DEFINE([PNG_RISCV_VECTOR_OPT], [2],
+                [Enable RISCV VECTOR optimizations])
+              ;;
          esac
          ;;
    esac])
@@ -517,6 +525,83 @@ AM_CONDITIONAL([PNG_POWERPC_VSX],
       powerpc*|ppc64*) : ;;
     esac])
 
+# RISC-V
+# ===
+#
+# RISC-V Vector support.
+
+AC_ARG_ENABLE([riscv-vector],
+   AS_HELP_STRING([[[--enable-riscv-vector]]],
+      [Enable RISC-V Vector optimizations: =no/off, check, api, yes/on:]
+      [no/off: disable the optimizations; check: use internal checking code]
+      [(experimental); api: disable by default, enable by]
+      [a call to png_set_option; yes/on: turn on unconditionally.]
+      [Note: The compiler must support riscv-vector (e.g. -march=rv64gv).]
+      [If not specified: determined by the compiler.]),
+   [case "$enableval" in
+      no|off)
+         # disable the default enabling on __RISCV_VECTOR__ systems:
+         AC_DEFINE([PNG_RISCV_VECTOR_OPT], [0],
+                   [Disable RISC-V Vector optimizations])
+         # Prevent inclusion of the assembler files below:
+         enable_riscv_vector=no;;
+      check)
+         AC_DEFINE([PNG_RISCV_VECTOR_CHECK_SUPPORTED], [],
+                   [Check for RISC-V Vector support at run-time]);;
+      api)
+         AC_DEFINE([PNG_RISCV_VECTOR_API_SUPPORTED], [],
+                   [Turn on RISC-V Vector optimizations at run-time]);;
+      yes|on)
+         AC_DEFINE([PNG_RISCV_VECTOR_OPT], [2],
+                   [Enable RISC-V Vector optimizations])
+         AC_MSG_WARN([--enable-riscv_vector: please specify 'check' or 'api', if]
+            [you want the optimizations unconditionally pass '-march=rv...v' (e.g. '-march=rv64gv')]
+            [to the compiler.]);;
+      *)
+         AC_MSG_ERROR([--enable-riscv-vector=${enable_riscv_vector}: invalid value])
+   esac])
+
+# compatibility to RVV draft 0.7.1, 0.8, 0.9, 0.10 and release 1.0
+AC_ARG_ENABLE([riscv-vector-compat],
+   AS_HELP_STRING([[[--enable-riscv-vector-compat]]],
+      [Enable compatibility for RISC-V Vector drafts 0.7.1, 0.8, 0.9, or 0.10 (only used if RISC-V Vector optimizations are enabled): =no/off, 0.7.1, 0.8, 0.9, 0.10:]
+      [no/off: Support RISC-V Vector release 1.0;]
+      [0.7.1: Support RISC-V Vector draft 0.7.1;]
+      [0.8: Support RISC-V Vector draft 0.8;]
+      [0.9: Support RISC-V Vector draft 0.9;]
+      [0.10: Support RISC-V Vector draft 0.10.]
+      [If not specified: off (Support RISC-V Vector release 1.0).]),
+   [case "$enableval" in
+      no|off);;
+      yes|on)
+         AC_MSG_ERROR([--enable-riscv-vector-compat: a specific draft version must be given]);;
+      "0.7.1")
+         AC_DEFINE([PNG_RISCV_VECTOR_COMPAT], [7],
+                   [Support RISC-V Vector draft 0.7.1]);;
+      "0.8")
+         AC_DEFINE([PNG_RISCV_VECTOR_COMPAT], [8],
+                   [Support RISC-V Vector draft 0.8]);;
+      "0.9")
+         AC_DEFINE([PNG_RISCV_VECTOR_COMPAT], [9],
+                   [Support RISC-V Vector draft 0.9]);;
+      "0.10")
+         AC_DEFINE([PNG_RISCV_VECTOR_COMPAT], [10],
+                   [Support RISC-V Vector draft 0.10]);;
+      *)
+         AC_MSG_ERROR([--enable-riscv-vector-compat=${enable_riscv_vector_compat}: invalid value])
+   esac])
+
+# Add RISC-V specific files to all builds where the host_cpu is riscv ('riscv*') or
+# where RISC-V optimizations were explicitly requested (this allows a fallback if a
+# future host CPU does not match 'riscv*')
+
+AM_CONDITIONAL([PNG_RISCV_VECTOR],
+   [test "$enable_riscv_vector" != 'no' &&
+    case "$host_cpu" in
+      riscv*) :;;
+      *)    test "$enable_riscv_vector" != '';;
+    esac])
+
 AC_MSG_NOTICE([[Extra options for compiler: $PNG_COPTS]])
 
 # Config files, substituting as above
diff --git a/contrib/riscv_vector/README b/contrib/riscv_vector/README
new file mode 100644
index 0000000..2b8ad7d
--- /dev/null
+++ b/contrib/riscv_vector/README
@@ -0,0 +1,82 @@
+OPERATING SYSTEM SPECIFIC RISC-V VECTOR DETECTION
+-------------------------------------------------
+
+Detection of the ability to execute RISC-V Vector on an RISC-V processor requires
+operating system support.  (The information is not available in user mode.)
+
+HOW TO USE THIS
+---------------
+
+This directory contains C code fragments that can be included in riscv/riscv_init.c
+by setting the macro PNG_RISCV_VECTOR_FILE to the file name in "" or <> at build
+time.  This setting is not recorded in pnglibconf.h and can be changed simply by
+rebuilding riscv/vector_init.o with the required macro definition.
+
+For any of this code to be used the RISC-V Vector code must be enabled and run time
+checks must be supported.  I.e.:
+
+#if PNG_RISCV_VECTOR_OPT > 0
+#ifdef PNG_RISCV_VECTOR_CHECK_SUPPORTED
+
+This is done in a 'configure' build by passing configure the argument:
+
+   --enable-riscv-vector=check
+
+Furthermore the compiler must have enabled support for the RISC-V Vector extension.
+(e.g. -march=rv64gv)
+
+FILE FORMAT
+-----------
+
+Each file documents its testing status as of the last time it was tested (which
+may have been a long time ago):
+
+STATUS: one of:
+   SUPPORTED: This indicates that the file is included in the regularly
+         performed test builds and bugs are fixed when discovered.
+   COMPILED: This indicates that the code did compile at least once.  See the
+         more detailed description for the extent to which the result was
+         successful.
+   TESTED: This means the code was fully compiled into the libpng test programs
+         and these were run at least once.
+
+BUG REPORTS: an email address to which to send reports of problems
+
+The file is a fragment of C code. It should not define any 'extern' symbols;
+everything should be static.  It must define the function:
+
+static int png_have_vector(png_structp png_ptr);
+
+That function must return 1 if RISC-V Vector instructions are supported, 0 if not.
+It must not execute png_error unless it detects a bug.  A png_error will prevent
+the reading of the PNG and in the future, writing too.
+
+BUG REPORTS
+-----------
+
+If you mail a bug report for any file that is not SUPPORTED there may only be
+limited response.  Consider fixing it and sending a patch to fix the problem -
+this is more likely to result in action.
+
+CONTRIBUTIONS
+-------------
+
+You may send contributions of new implementations to
+png-mng-implement@sourceforge.net.  Please write code in strict C90 C where
+possible.  Obviously OS dependencies are to be expected.  If you submit code you
+must have the authors permission and it must have a license that is acceptable
+to the current maintainer; in particular that license must permit modification
+and redistribution.
+
+Please try to make the contribution a single file and give the file a clear and
+unambiguous name that identifies the target OS.  If multiple files really are
+required put them all in a sub-directory.
+
+You must also be prepared to handle bug reports from users of the code, either
+by joining the png-mng-implement mailing list or by providing an email for the
+"BUG REPORTS" entry or both.  Please make sure that the header of the file
+contains the STATUS and BUG REPORTS fields as above.
+
+Please list the OS requirements as precisely as possible.  Ideally you should
+also list the environment in which the code has been tested and certainly list
+any environments where you suspect it might not work.
\ No newline at end of file
diff --git a/contrib/riscv_vector/linux.c b/contrib/riscv_vector/linux.c
new file mode 100644
index 0000000..43a0333
--- /dev/null
+++ b/contrib/riscv_vector/linux.c
@@ -0,0 +1,84 @@
+/* contrib/riscv-vector/linux.c
+ *
+ * Copyright (c) 2021 Manfred Schlaegl
+ * Copyright (c) 2020 Cosmin Truta
+ * Copyright (c) 2016 Glenn Randers-Pehrson
+ * Written by Manfred Schlaegl, October 2021.
+ *
+ * This code is released under the libpng license.
+ * For conditions of distribution and use, see the disclaimer
+ * and license in png.h
+ *
+ * SEE contrib/riscv-vector/README before reporting bugs
+ *
+ * STATUS: SUPPORTED
+ * BUG REPORTS: png-mng-implement@sourceforge.net
+ *
+ * png_have_vector implemented for Linux by reading the widely available
+ * pseudo-file /proc/cpuinfo.
+ *
+ * This code is strict ANSI-C and is probably moderately portable; it does
+ * however use <stdio.h>, <string.h> and it assumes that /proc/cpuinfo is
+ * never localized.
+ */
+
+#include <stdio.h>
+#include <string.h>
+
+#define MAX_LINE_SIZE 256
+
+static int
+png_have_vector(png_structp png_ptr)
+{
+   int ret = 0;
+
+   FILE *f = fopen("/proc/cpuinfo", "rb");
+   if (f == NULL) {
+#ifdef PNG_WARNINGS_SUPPORTED
+      png_warning(png_ptr, "/proc/cpuinfo open failed");
+#endif
+      return 0;
+   }
+
+   while(!feof(f))
+   {
+      char line[MAX_LINE_SIZE];
+
+      /* read line */
+      int i = 0;
+      while (i < (MAX_LINE_SIZE - 1))
+      {
+         char ch = fgetc(f);
+         if (ch == '\n' || ch == EOF)
+            break;
+         line[i++] = ch;
+      }
+      line[i] = '\0';
+
+      /* does line start with "isa"? */
+      if (strncmp("isa", line, 3) != 0)
+         continue;
+
+      /* find value starting with "rv" */
+      char *val = strstr(line, "rv");
+      if (val == NULL)
+         continue;
+
+      /* skip "rv" */
+      val += 2;
+
+      /* check for vector 'v' */
+      val = strchr(line, 'v');
+      if (val != NULL)
+      {
+         /* found */
+         ret = 1;
+         break;
+      }
+   }
+
+   fclose(f);
+   return ret;
+}
+  5 changes: 4 additions & 1 deletion5  
+png.h
\ No newline at end of file
diff --git a/png.h b/png.h
index f109cdf..84a4fb5 100644
--- a/png.h
+++ b/png.h
@@ -3211,7 +3211,10 @@ PNG_EXPORT(245, int, png_image_write_to_memory, (png_imagep image, void *memory,
 #ifdef PNG_POWERPC_VSX_API_SUPPORTED
 #  define PNG_POWERPC_VSX   10 /* HARDWARE: PowerPC VSX SIMD instructions supported */
 #endif
-#define PNG_OPTION_NEXT  12 /* Next option - numbers must be even */
+#ifdef PNG_RISCV_VECTOR_API_SUPPORTED
+#  define PNG_RISCV_VECTOR  12 /* HARDWARE: RISC-V Vector extension supported */
+#endif
+#define PNG_OPTION_NEXT  14 /* Next option - numbers must be even */
 
 /* Return values: NOTE: there are four values and 'off' is *not* zero */
 #define PNG_OPTION_UNSET   0 /* Unset - defaults to off */
diff --git a/pngpriv.h b/pngpriv.h
index b8a73b6..9a82b7f 100644
--- a/pngpriv.h
+++ b/pngpriv.h
@@ -276,6 +276,18 @@
 #  define PNG_POWERPC_VSX_IMPLEMENTATION 0
 #endif
 
+#ifndef PNG_RISCV_VECTOR_OPT
+#  if defined(__riscv_vector)
+#     define PNG_RISCV_VECTOR_OPT 2
+#  else
+#     define PNG_RISCV_VECTOR_OPT 0
+#  endif
+#endif
+
+#if PNG_RISCV_VECTOR_OPT > 0
+#  define PNG_FILTER_OPTIMIZATIONS png_init_filter_functions_vector
+#  define PNG_RISCV_VECTOR_IMPLEMENTATION 1 // intrinsics implementation only
+#endif
 
 /* Is this a build of a DLL where compilation of the object modules requires
  * different preprocessor settings to those required for a simple library?  If
@@ -1355,6 +1367,23 @@ PNG_INTERNAL_FUNCTION(void,png_read_filter_row_paeth4_sse2,(png_row_infop
     row_info, png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
 #endif
 
+#if PNG_RISCV_VECTOR_IMPLEMENTATION > 0
+PNG_INTERNAL_FUNCTION(void,png_read_filter_row_up_vector,(png_row_infop row_info,
+    png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_read_filter_row_sub3_vector,(png_row_infop
+    row_info, png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_read_filter_row_sub4_vector,(png_row_infop
+    row_info, png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_read_filter_row_avg3_vector,(png_row_infop
+    row_info, png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_read_filter_row_avg4_vector,(png_row_infop
+    row_info, png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_read_filter_row_paeth3_vector,(png_row_infop
+    row_info, png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_read_filter_row_paeth4_vector,(png_row_infop
+    row_info, png_bytep row, png_const_bytep prev_row),PNG_EMPTY);
+#endif
+
 /* Choose the best filter to use and filter the row data */
 PNG_INTERNAL_FUNCTION(void,png_write_find_filter,(png_structrp png_ptr,
     png_row_infop row_info),PNG_EMPTY);
diff --git a/riscv/filter_vector_intrinsics.c b/riscv/filter_vector_intrinsics.c
new file mode 100644
index 0000000..bbcfabd
--- /dev/null
+++ b/riscv/filter_vector_intrinsics.c
@@ -0,0 +1,354 @@
+/* filter_vector_intrinsics.c - Vector extension optimised filter functions
+ *
+ * Copyright (c) 2021 Manfred Schlaegl
+ * Copyright (c) 2018 Cosmin Truta
+ * Copyright (c) 2016 Glenn Randers-Pehrson
+ * Written by Manfred Schlaegl, October 2021.
+ *
+ * This code is released under the libpng license.
+ * For conditions of distribution and use, see the disclaimer
+ * and license in png.h
+ */
+
+#include "../pngpriv.h"
+#include <riscv_vector.h>
+
+#ifdef PNG_READ_SUPPORTED
+
+/* This code requires -march containing 'v' on the command line: */
+#if PNG_RISCV_VECTOR_IMPLEMENTATION == 1 /* intrinsics code from pngpriv.h */
+
+#if PNG_RISCV_VECTOR_OPT > 0
+
+void png_read_filter_row_up_vector(png_row_infop row_info, png_bytep row,
+                                   png_const_bytep prev_row)
+{
+   size_t rowbytes = row_info->rowbytes;
+
+   /*
+    * row:      | b |
+    * prow:     | x |
+    *
+    * b = b + x
+    *
+    */
+
+   for (size_t vl; rowbytes > 0; rowbytes -= vl, row += vl, prev_row += vl)
+   {
+      vl = __riscv_vsetvl_e8m8(rowbytes);               // set vl
+      vuint8m8_t x = __riscv_vle8_v_u8m8(row, vl);      // load b=row
+      vuint8m8_t b = __riscv_vle8_v_u8m8(prev_row, vl); // load x=prev_row
+      x = __riscv_vadd_vv_u8m8(x, b, vl);               // row += prev_row
+      __riscv_vse8_v_u8m8(row, x, vl);                  // store x to row
+   }
+}
+
+void png_read_filter_row_sub3_vector(png_row_infop row_info, png_bytep row,
+                                     png_const_bytep prev_row)
+{
+   png_bytep rp = row;
+   png_bytep rp_stop = row + row_info->rowbytes;
+
+   /*
+    *           |<- bbp ->|<- bbp ->|
+    * row:      |    a    |    x    |
+    *
+    * x = x + a
+    *
+    */
+
+   vuint8m1_t a = __riscv_vmv_v_x_u8m1(0, 3);
+
+   for (; rp < rp_stop; rp += 12)
+   {
+      vuint8m1_t x = __riscv_vle8_v_u8m1(rp, 16);
+      vuint8m1_t x_1 = __riscv_vslidedown_vx_u8m1(x, 3, 16);
+      vuint8m1_t x_2 = __riscv_vslidedown_vx_u8m1(x_1, 3, 16);
+      vuint8m1_t x_3 = __riscv_vslidedown_vx_u8m1(x_2, 3, 16);
+
+      // ==========================================================================
+      a = __riscv_vadd_vv_u8m1(x, a, 12);
+      vuint8m1_t dest = __riscv_vmv_v_v_u8m1(a, 12); // rgb|000|000|000
+
+      a = __riscv_vadd_vv_u8m1(x_1, a, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 3, 12); // rgb|rgb|000|000
+
+      a = __riscv_vadd_vv_u8m1(x_2, a, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 6, 12); // rgb|rgb|rgb|000
+
+      a = __riscv_vadd_vv_u8m1(x_3, a, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 9, 12); // rgb|rgb|rgb|rgb
+
+      __riscv_vse8_v_u8m1(rp, dest, 12);
+   }
+}
+
+void png_read_filter_row_sub4_vector(png_row_infop row_info, png_bytep row,
+                                     png_const_bytep prev_row)
+{
+   png_bytep rp = row;
+   png_bytep rp_stop = row + row_info->rowbytes;
+
+   /*
+    *           |<- bbp ->|<- bbp ->|
+    * row:      |    a    |    x    |
+    *
+    * x = x + a
+    *
+    */
+
+   vuint8m1_t a = __riscv_vmv_v_x_u8m1(0, 4);
+
+   for (; rp < rp_stop; rp += 16)
+   {
+      vuint8m1_t x = __riscv_vle8_v_u8m1(rp, 16);
+      vuint8m1_t x_1 = __riscv_vslidedown_vx_u8m1(x, 4, 16);
+      vuint8m1_t x_2 = __riscv_vslidedown_vx_u8m1(x_1, 4, 16);
+      vuint8m1_t x_3 = __riscv_vslidedown_vx_u8m1(x_2, 4, 16);
+
+      // ==========================================================================
+      a = __riscv_vadd_vv_u8m1(x, a, 16);
+      vuint8m1_t dest = __riscv_vmv_v_v_u8m1(a, 16); // rgba|0000|0000|0000
+
+      a = __riscv_vadd_vv_u8m1(x_1, a, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 4, 16); // rgba|rgba|0000|0000
+
+      a = __riscv_vadd_vv_u8m1(x_2, a, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 8, 16); // rgba|rgba|rgba|0000
+
+      a = __riscv_vadd_vv_u8m1(x_3, a, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 12, 16); // rgba|rgba|rgba|rgba
+
+      __riscv_vse8_v_u8m1(rp, dest, 16);
+   }
+}
+
+void png_read_filter_row_avg3_vector(png_row_infop row_info, png_bytep row,
+                                     png_const_bytep prev_row)
+{
+   png_bytep rp = row;
+   png_const_bytep pp = prev_row;
+   png_bytep rp_stop = row + row_info->rowbytes;
+
+   asm volatile("csrwi vxrm, 2");
+
+   vuint8m1_t x, a, b;
+   a = __riscv_vmv_v_x_u8m1(0, 3);
+
+   for (; rp < rp_stop; rp += 12, pp += 12)
+   {
+      vuint8m1_t x = __riscv_vle8_v_u8m1(rp, 12);
+      vuint8m1_t x_1 = __riscv_vslidedown_vx_u8m1(x, 3, 12);
+      vuint8m1_t x_2 = __riscv_vslidedown_vx_u8m1(x_1, 3, 12);
+      vuint8m1_t x_3 = __riscv_vslidedown_vx_u8m1(x_2, 3, 12);
+
+      vuint8m1_t b = __riscv_vle8_v_u8m1(pp, 12);
+      vuint8m1_t b_1 = __riscv_vslidedown_vx_u8m1(b, 3, 12);
+      vuint8m1_t b_2 = __riscv_vslidedown_vx_u8m1(b_1, 3, 12);
+      vuint8m1_t b_3 = __riscv_vslidedown_vx_u8m1(b_2, 3, 12);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b, 12);
+      a = __riscv_vadd_vv_u8m1(a, x, 12);
+      vuint8m1_t dest = __riscv_vmv_v_v_u8m1(a, 12);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b_1, 12);
+      a = __riscv_vadd_vv_u8m1(a, x_1, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 3, 12);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b_2, 12);
+      a = __riscv_vadd_vv_u8m1(a, x_2, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 6, 12);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b_3, 12);
+      a = __riscv_vadd_vv_u8m1(a, x_3, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 9, 12);
+
+      __riscv_vse8_v_u8m1(rp, dest, 12);
+   }
+   asm volatile("csrwi vxrm, 0");
+}
+
+void png_read_filter_row_avg4_vector(png_row_infop row_info, png_bytep row,
+                                     png_const_bytep prev_row)
+{
+   png_bytep rp = row;
+   png_const_bytep pp = prev_row;
+   png_bytep rp_stop = row + row_info->rowbytes;
+
+   asm volatile("csrwi vxrm, 2");
+
+   vuint8m1_t x, a, b;
+   a = __riscv_vmv_v_x_u8m1(0, 4);
+
+   for (; rp < rp_stop; rp += 16, pp += 16)
+   {
+      vuint8m1_t x = __riscv_vle8_v_u8m1(rp, 16);
+      vuint8m1_t x_1 = __riscv_vslidedown_vx_u8m1(x, 4, 16);
+      vuint8m1_t x_2 = __riscv_vslidedown_vx_u8m1(x_1, 4, 16);
+      vuint8m1_t x_3 = __riscv_vslidedown_vx_u8m1(x_2, 4, 16);
+
+      vuint8m1_t b = __riscv_vle8_v_u8m1(pp, 16);
+      vuint8m1_t b_1 = __riscv_vslidedown_vx_u8m1(b, 4, 16);
+      vuint8m1_t b_2 = __riscv_vslidedown_vx_u8m1(b_1, 4, 16);
+      vuint8m1_t b_3 = __riscv_vslidedown_vx_u8m1(b_2, 4, 16);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b, 16);
+      a = __riscv_vadd_vv_u8m1(a, x, 16);
+      vuint8m1_t dest = __riscv_vmv_v_v_u8m1(a, 16);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b_1, 16);
+      a = __riscv_vadd_vv_u8m1(a, x_1, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 4, 16);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b_2, 16);
+      a = __riscv_vadd_vv_u8m1(a, x_2, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 8, 16);
+
+      a = __riscv_vaaddu_vv_u8m1(a, b_3, 16);
+      a = __riscv_vadd_vv_u8m1(a, x_3, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 12, 16);
+
+      __riscv_vse8_v_u8m1(rp, dest, 16);
+   }
+   asm volatile("csrwi vxrm, 0");
+}
+
+#define paeth(n, vl)                                 \
+   {                                                 \
+      pa = __riscv_vwsubu_vv_u16m2(b_##n, c, vl);    \
+      pb = __riscv_vwsubu_vv_u16m2(a, c, vl);        \
+                                                     \
+      pc = __riscv_vadd_vv_u16m2(pa, pb, vl);        \
+      tmp = __riscv_vrsub_vx_u16m2(pc, 0, vl);       \
+      pc = __riscv_vminu_vv_u16m2(pc, tmp, vl);      \
+                                                     \
+      tmp = __riscv_vrsub_vx_u16m2(pa, 0, vl);       \
+      pa = __riscv_vminu_vv_u16m2(pa, tmp, vl);      \
+                                                     \
+      tmp = __riscv_vrsub_vx_u16m2(pb, 0, vl);       \
+      pb = __riscv_vminu_vv_u16m2(pb, tmp, vl);      \
+                                                     \
+      m1 = __riscv_vmsltu_vv_u16m2_b8(pb, pa, vl);   \
+      pa = __riscv_vmerge_vvm_u16m2(pa, pb, m1, vl); \
+      m2 = __riscv_vmsltu_vv_u16m2_b8(pc, pa, vl);   \
+                                                     \
+      a = __riscv_vmerge_vvm_u8m1(a, b_##n, m1, vl); \
+      a = __riscv_vmerge_vvm_u8m1(a, c, m2, vl);     \
+   }
+
+void png_read_filter_row_paeth3_vector(png_row_infop row_info, png_bytep row,
+                                       png_const_bytep prev_row)
+{
+   png_bytep rp = row;
+   png_const_bytep pp = prev_row;
+   png_bytep rp_stop = row + row_info->rowbytes;
+
+   vbool8_t m1, m2;
+   vuint8m1_t x, a, b, c;
+   vuint16m2_t p, pa, pb, pc, tmp;
+
+   a = __riscv_vmv_v_x_u8m1(0, 3);
+   c = __riscv_vmv_v_x_u8m1(0, 3);
+
+   for (; rp < rp_stop; rp += 12, pp += 12)
+   {
+      vuint8m1_t x = __riscv_vle8_v_u8m1(rp, 12);
+      vuint8m1_t x_1 = __riscv_vslidedown_vx_u8m1(x, 3, 12);
+      vuint8m1_t x_2 = __riscv_vslidedown_vx_u8m1(x_1, 3, 12);
+      vuint8m1_t x_3 = __riscv_vslidedown_vx_u8m1(x_2, 3, 12);
+
+      vuint8m1_t b_0 = __riscv_vle8_v_u8m1(pp, 12);
+      vuint8m1_t b_1 = __riscv_vslidedown_vx_u8m1(b_0, 3, 12);
+      vuint8m1_t b_2 = __riscv_vslidedown_vx_u8m1(b_1, 3, 12);
+      vuint8m1_t b_3 = __riscv_vslidedown_vx_u8m1(b_2, 3, 12);
+
+      // a = paeth(a, b_0, c, 12);
+      paeth(0, 12);
+      a = __riscv_vadd_vv_u8m1(a, x, 12);
+      vuint8m1_t dest = __riscv_vmv_v_v_u8m1(a, 12);
+      c = b_0;
+
+      // a = paeth(a, b_1, c, 12);
+      paeth(1, 12);
+      a = __riscv_vadd_vv_u8m1(a, x_1, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 3, 12);
+      c = b_1;
+
+      // a = paeth(a, b_2, c, 12);
+      paeth(2, 12);
+      a = __riscv_vadd_vv_u8m1(a, x_2, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 6, 12);
+      c = b_2;
+
+      // a = paeth(a, b_3, c, 12);
+      paeth(3, 12);
+      a = __riscv_vadd_vv_u8m1(a, x_3, 12);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 9, 12);
+      c = b_3;
+
+      __riscv_vse8_v_u8m1(rp, dest, 12);
+   }
+}
+
+void png_read_filter_row_paeth4_vector(png_row_infop row_info, png_bytep row,
+                                       png_const_bytep prev_row)
+{
+   png_bytep rp = row;
+   png_const_bytep pp = prev_row;
+   png_bytep rp_stop = row + row_info->rowbytes;
+
+   vbool8_t m1, m2;
+   vuint8m1_t x, a, b, c;
+   vuint16m2_t p, pa, pb, pc, tmp;
+
+   vuint8m1_t bindex0 = __riscv_vid_v_u8m1(4);
+   vuint8m1_t bindex1 = __riscv_vadd_vx_u8m1(bindex0, 4, 4);
+   vuint8m1_t bindex2 = __riscv_vadd_vx_u8m1(bindex1, 4, 4);
+   vuint8m1_t bindex3 = __riscv_vadd_vx_u8m1(bindex2, 4, 4);
+
+   a = __riscv_vmv_v_x_u8m1(0, 4);
+   c = __riscv_vmv_v_x_u8m1(0, 4);
+
+   for (; rp < rp_stop; rp += 16, pp += 16)
+   {
+      vuint8m1_t x = __riscv_vle8_v_u8m1(rp, 16);
+      vuint8m1_t x_1 = __riscv_vrgather_vv_u8m1(x, bindex1, 16);
+      vuint8m1_t x_2 = __riscv_vrgather_vv_u8m1(x, bindex2, 16);
+      vuint8m1_t x_3 = __riscv_vrgather_vv_u8m1(x, bindex3, 16);
+
+      vuint8m1_t b_0 = __riscv_vle8_v_u8m1(pp, 16);
+      vuint8m1_t b_1 = __riscv_vrgather_vv_u8m1(b_0, bindex1, 16);
+      vuint8m1_t b_2 = __riscv_vrgather_vv_u8m1(b_0, bindex2, 16);
+      vuint8m1_t b_3 = __riscv_vrgather_vv_u8m1(b_0, bindex3, 16);
+
+      // a = paeth(a, b_0, c, 16);
+      paeth(0, 16);
+      a = __riscv_vadd_vv_u8m1(a, x, 16);
+      vuint8m1_t dest = __riscv_vmv_v_v_u8m1(a, 16);
+      c = b_0;
+
+      // a = paeth(a, b_1, c, 16);
+      paeth(1, 16);
+      a = __riscv_vadd_vv_u8m1(a, x_1, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 4, 16);
+      c = b_1;
+
+      // a = paeth(a, b_2, c, 16);
+      paeth(2, 16);
+      a = __riscv_vadd_vv_u8m1(a, x_2, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 8, 16);
+      c = b_2;
+
+      // a = paeth(a, b_3, c, 16);
+      paeth(3, 16);
+      a = __riscv_vadd_vv_u8m1(a, x_3, 16);
+      dest = __riscv_vslideup_vx_u8m1(dest, a, 12, 16);
+      c = b_3;
+
+      __riscv_vse8_v_u8m1(rp, dest, 16);
+   }
+}
+
+#endif /* PNG_RISCV_VECTOR_OPT > 0 */
+#endif /* PNG_RISCV_VECTOR_IMPLEMENTATION == 1 (intrinsics) */
+#endif /* READ */
diff --git a/riscv/riscv_init.c b/riscv/riscv_init.c
new file mode 100644
index 0000000..df3ac45
--- /dev/null
+++ b/riscv/riscv_init.c
@@ -0,0 +1,127 @@
+/* riscv_init.c - Vector optimised filter functions
+ *
+ * Copyright (c) 2021 Manfred Schlaegl
+ * Copyright (c) 2018 Cosmin Truta
+ * Copyright (c) 2014,2016 Glenn Randers-Pehrson
+ * Written by Manfred Schlaegl, October 2021.
+ *
+ * This code is released under the libpng license.
+ * For conditions of distribution and use, see the disclaimer
+ * and license in png.h
+ */
+
+/* Below, after checking __linux__, various non-C90 POSIX 1003.1 functions are
+ * called.
+ */
+#define _POSIX_SOURCE 1
+
+#include "../pngpriv.h"
+
+#ifdef PNG_READ_SUPPORTED
+
+#if PNG_RISCV_VECTOR_OPT > 0
+#ifdef PNG_RISCV_VECTOR_CHECK_SUPPORTED /* Do run-time checks */
+/* WARNING: it is strongly recommended that you do not build libpng with
+ * run-time checks for CPU features if at all possible.  In the case of the RISC-V
+ * Vector instructions there is no processor-specific way of detecting the
+ * presence of the required support, therefore run-time detection is extremely
+ * OS specific.
+ *
+ * You may set the macro PNG_RISCV_VECTOR_FILE to the file name of file containing
+ * a fragment of C source code which defines the png_have_vector function. There
+ * may be number of implementations in contrib/riscv-vector, but the only one that
+ * has partial support is contrib/riscv-vector/linux.c - a generic Linux
+ * implementation which reads /proc/cpufino.
+ */
+#ifndef PNG_RISCV_VECTOR_FILE
+#  ifdef __linux__
+#     define PNG_RISCV_VECTOR_FILE "contrib/riscv-vector/linux.c"
+#  endif
+#endif
+
+#ifdef PNG_RISCV_VECTOR_FILE
+
+#include <signal.h> /* for sig_atomic_t */
+static int png_have_vector(png_structp png_ptr);
+#include PNG_RISCV_VECTOR_FILE
+
+#else  /* PNG_RISCV_VECTOR_FILE */
+#  error "PNG_RISCV_VECTOR_FILE undefined: no support for run-time RISC-V Vector checks"
+#endif /* PNG_RISCV_VECTOR_FILE */
+#endif /* PNG_RISCV_VECTOR_CHECK_SUPPORTED */
+
+void
+png_init_filter_functions_vector(png_structp pp, unsigned int bpp)
+{
+   /* The switch statement is compiled in for RISCV_VECTOR_API, the call to
+    * png_have_vector is compiled in for RISCV_VECTOR_CHECK.  If both are defined
+    * the check is only performed if the API has not set the Vector option on
+    * or off explicitly.  In this case the check controls what happens.
+    */
+   png_debug(1, "in png_init_filter_functions_vector");
+#ifdef PNG_RISCV_VECTOR_API_SUPPORTED
+   switch ((pp->options >> PNG_RISCV_VECTOR) & 3)
+   {
+      case PNG_OPTION_UNSET:
+         /* Allow the run-time check to execute if it has been enabled -
+          * thus both API and CHECK can be turned on.  If it isn't supported
+          * this case will fall through to the 'default' below, which just
+          * returns.
+          */
+#endif /* PNG_RISCV_VECTOR_API_SUPPORTED */
+#ifdef PNG_RISCV_VECTOR_CHECK_SUPPORTED
+         {
+            static volatile sig_atomic_t no_vector = -1; /* not checked */
+
+            if (no_vector < 0)
+               no_vector = !png_have_vector(pp);
+
+            if (no_vector)
+               return;
+         }
+#ifdef PNG_RISCV_VECTOR_API_SUPPORTED
+         break;
+#endif
+#endif /* PNG_RISCV_VECTOR_CHECK_SUPPORTED */
+
+#ifdef PNG_RISCV_VECTOR_API_SUPPORTED
+      default: /* OFF or INVALID */
+         return;
+
+      case PNG_OPTION_ON:
+         /* Option turned on */
+         break;
+   }
+#endif
+
+   /* IMPORTANT: any new external functions used here must be declared using
+    * PNG_INTERNAL_FUNCTION in ../pngpriv.h.  This is required so that the
+    * 'prefix' option to configure works:
+    *
+    *    ./configure --with-libpng-prefix=foobar_
+    *
+    * Verify you have got this right by running the above command, doing a build
+    * and examining pngprefix.h; it must contain a #define for every external
+    * function you add.  (Notice that this happens automatically for the
+    * initialization function.)
+    */
+   pp->read_filter[PNG_FILTER_VALUE_UP-1] = png_read_filter_row_up_vector;
+
+   if (bpp == 3)
+   {
+      pp->read_filter[PNG_FILTER_VALUE_SUB-1] = png_read_filter_row_sub3_vector;
+      pp->read_filter[PNG_FILTER_VALUE_AVG-1] = png_read_filter_row_avg3_vector;
+      pp->read_filter[PNG_FILTER_VALUE_PAETH-1] =
+         png_read_filter_row_paeth3_vector;
+   }
+
+   else if (bpp == 4)
+   {
+      pp->read_filter[PNG_FILTER_VALUE_SUB-1] = png_read_filter_row_sub4_vector;
+      pp->read_filter[PNG_FILTER_VALUE_AVG-1] = png_read_filter_row_avg4_vector;
+      pp->read_filter[PNG_FILTER_VALUE_PAETH-1] =
+          png_read_filter_row_paeth4_vector;
+   }
+}
+#endif /* PNG_RISCV_VECTOR_OPT > 0 */
+#endif /* READ */
\ No newline at end of file
-- 
2.25.1

